pipeline {
    agent {
        docker {
            label 'cloud-governance-worker'
            image 'quay.io/athiru/centos-stream8-podman:latest'
            args  '-u root -v /etc/postfix/main.cf:/etc/postfix/main.cf --privileged'
        }
    }
    environment {
        QUAY_CLOUD_GOVERNANCE_REPOSITORY = credentials('QUAY_CLOUD_GOVERNANCE_REPOSITORY')
        ES_HOST = credentials('cloud-governance-es-host')
        ES_PORT = credentials('cloud-governance-es-port')
        IBM_API_USERNAME_PERFORMANCE_SCALE = credentials('cloud-governance-ibm-api-username-performance-scale')
        IBM_API_KEY_PERFORMANCE_SCALE = credentials('cloud-governance-ibm-api-key-performance-scale')
        IBM_ACCOUNT_ID_PERFORMANCE_SCALE = credentials('cloud-governance-ibm-account-id-performance-scale')
        USAGE_REPORTS_APIKEY_PERFORMANCE_SCALE = credentials('cloud-governance-ibm-service-id-performance-scale')
        IBM_API_USERNAME_INTEROP_IBM_CI = credentials('cloud-governance-ibm-api-username-interop-ibm-ci')
        IBM_API_KEY_INTEROP_IBM_CI = credentials('cloud-governance-ibm-api-key-interop-ibm-ci')
        IBM_ACCOUNT_ID_INTEROP_IBM_CI = credentials('cloud-governance-ibm-account-id-interop-ibm-ci')
        USAGE_REPORTS_APIKEY_INTEROP_IBM_CI = credentials('cloud-governance-ibm-service-id-interop-ibm-ci')
        IBM_API_USERNAME_CERTIFICATION_CE = credentials('cloud-governance-ibm-api-username-certification-ce')
        IBM_API_KEY_CERTIFICATION_CE = credentials('cloud-governance-ibm-api-key-certification-ce')
        IBM_ACCOUNT_ID_CERTIFICATION_CE = credentials('cloud-governance-ibm-account-id-certification-ce')
        USAGE_REPORTS_APIKEY_CERTIFICATION_CE = credentials('cloud-governance-ibm-service-id-certification-ce')
        COST_SPREADSHEET_ID = credentials('cloud-governance-cost-spreadsheet-id')
        GOOGLE_APPLICATION_CREDENTIALS = credentials('cloud-governance-google-application-credentials')
        LDAP_HOST_NAME = credentials('cloud-governance-ldap-host-name')

        CLOUDABILITY_API = credentials('cloudability_api')
        CLOUDABILITY_API_REPORTS_PATH = credentials('cloudability_api_reports_path')
        CLOUDABILITY_METRICS = credentials('cloudability_metrics')
        CLOUDABILITY_VIEW_ID = credentials('cloudability_view_id')
        APPITO_KEY_ACCESS = credentials('appito_key_access')
        APPITO_KEY_SECRET = credentials('appito_key_secret')
        APPITO_ENVID = credentials('appito_envid')

        contact1 = "ebattat@redhat.com"
        contact2 = "athiruma@redhat.com"
    }
    stages {
        stage('Checkout') { // Checkout (git clone ...) the projects repository
           steps {
                 checkout scm
           }
        }
        stage('Initial Cleanup') {
            steps {
                 sh '''if [[ "$(podman images -q ${QUAY_CLOUD_GOVERNANCE_REPOSITORY} 2> /dev/null)" != "" ]]; then podman rmi -f $(podman images -q ${QUAY_CLOUD_GOVERNANCE_REPOSITORY} 2> /dev/null); fi'''
            }
        }
        stage('Run Tagging Cluster & Non-Cluster') {
            steps {
                 sh 'python3 jenkins/clouds/ibm/daily/cost_billings/run_ibm_cost_reports.py'
            }
        }
        stage('Finalize Cleanup') {
            steps {
                 sh '''if [[ "$(podman images -q ${QUAY_CLOUD_GOVERNANCE_REPOSITORY} 2> /dev/null)" != "" ]]; then podman rmi -f $(podman images -q ${QUAY_CLOUD_GOVERNANCE_REPOSITORY} 2> /dev/null); fi'''
                 deleteDir()
            }
        }
    }
    post {
        failure {
              script {
                msg = "Build error for ${env.JOB_NAME} ${env.BUILD_NUMBER} (${env.BUILD_URL})"
                emailext body: """\
            Jenkins job: ${env.BUILD_URL}\nSee the console output for more details:  ${env.BUILD_URL}consoleFull\n\n
            """,subject: msg, to: "${contact1}, ${contact2}"
            }
          }
    }
}
