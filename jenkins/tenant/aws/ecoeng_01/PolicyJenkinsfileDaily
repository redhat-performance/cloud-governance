accounts_list = ['industry-partners': "hhalbfin@redhat.com",
                 'certification-pipeline': "matt.dorn@redhat.com, mhillsma@redhat.com, babak@redhat.com, hhalbfin@redhat.com",
                 'ecoengverticals-qe': "augol@redhat.com, hhalbfin@redhat.com",
                 'emerge-partner': "jsalomon@redhat.com, ltomasbo@redhat.com, hhalbfin@redhat.com",
                 'telco5g-ci': "yjoseph@redhat.com, hhalbfin@redhat.com, sshnaidm@redhat.com",
                 'ecoeng-sap': "cbrune@redhat.com, ksatarin@redhat.com, babak@redhat.com, hhalbfin@redhat.com",
                 'sysdeseng': "scollier@redhat.com, hhalbfin@redhat.com, mavazque@redhat.com",
                 'appeng-ai': "matrujil@redhat.com, mmikhail@redhat.com, babak@redhat.com, hhalbfin@redhat.com",
                 'verticals-ui': "brotman@redhat.com, hhalbfin@redhat.com",
                 'special-projects': "chen.yosef@redhat.com, hhalbfin@redhat.com",
                 'edgeinfra': "lgamliel@redhat.com, bthurber@redhat.com, oourfali@redhat.com, hhalbfin@redhat.com",
                 'specialprojects-qe': "augol@redhat.com, hhalbfin@redhat.com",
                 'partnerlab': "matt.dorn@redhat.com, jomckenz@redhat.com, babak@redhat.com, hhalbfin@redhat.com, mrhillsman@redhat.com",
                 'blueprints': "abeekhof@redhat.com, hhalbfin@redhat.com"
                 ]
pipeline {
    options {
        disableConcurrentBuilds()
    }
    agent {
        docker {
            label 'haim-cloud-governance-worker'
            image 'quay.io/athiru/fedora38-podman:latest'
            // Change based on the worker os
            args  '-u root -v /etc/postfix/main.cf:/etc/postfix/main.cf --privileged'
        }
    }
    environment {
        QUAY_CLOUD_GOVERNANCE_REPOSITORY = credentials('QUAY_CLOUD_GOVERNANCE_REPOSITORY')
        AWS_IAM_USER_SPREADSHEET_ID = credentials('cloud-governance-aws-iam-user-spreadsheet-id')
        GOOGLE_APPLICATION_CREDENTIALS = credentials('cloud-governance-google-application-credentials')
        LDAP_HOST_NAME = credentials('cloud-governance-ldap-host-name')
        ES_HOST = credentials('haim-cloud-governance-elasticsearch-url')
        ES_PORT = credentials('haim-cloud-governance-elasticsearch-port')
        ALERT_DRY_RUN = true
        contact1 = "ebattat@redhat.com"
        contact2 = "athiruma@redhat.com"
        contact3 = "mmikhail@redhat.com"
        contact4 = "matrujil@redhat.com"
        // Find the all available policies: https://github.com/redhat-performance/cloud-governance/tree/main/cloud_governance/policy
        // By default, all policies are running in dry_run="yes" mode and the whole list can be found in run_policies.py
    }
    stages {
        stage('Checkout') { // Checkout (git clone ...) the projects repository
           steps {
                 checkout scm
           }
        }
        stage('Initial Cleanup') {
            steps {
                 sh '''if [[ "$(podman images -q ${QUAY_CLOUD_GOVERNANCE_REPOSITORY} 2> /dev/null)" != "" ]]; then podman rmi -f $(podman images -q ${QUAY_CLOUD_GOVERNANCE_REPOSITORY} 2> /dev/null); fi'''
            }
        }
        stage('Run Cost Policies') {
            steps {
                 script {
                    for (account in accounts_list.keySet()) {
                        echo "Running for account ${account.toUpperCase()}"
                        withCredentials([string(credentialsId: "${account}-aws-access-key-id", variable: 'access_key'),
                                        string(credentialsId: "${account}-aws-secret-key-id", variable: 'secret_key'),
                                        string(credentialsId: "${account}-s3-bucket", variable: 's3_bucket')])
                        {
                            env.account_name = "${account}"
                            env.ADMIN_MAIL_LIST = "${accounts_list[account]}"
                            sh 'python3 jenkins/tenant/aws/common/run_cost_policies.py'
                        }
                    }
                }
            }
        }
        stage('Run Daily Policies') {
            steps {
                 script {
                    for (account in accounts_list.keySet()) {
                        echo "Running for account ${account.toUpperCase()}"
                        withCredentials([string(credentialsId: "${account}-aws-access-key-id", variable: 'access_key'),
                                        string(credentialsId: "${account}-aws-secret-key-id", variable: 'secret_key'),
                                        string(credentialsId: "${account}-s3-bucket", variable: 's3_bucket')]) {
                        // POLICIES_IN_ACTION: Policies that run in the dry_run="no" mode
                        env.POLICIES_IN_ACTION = '["unattached_volume", "ip_unattached", "zombie_snapshots", "unused_nat_gateway", "s3_inactive", "empty_roles"]'
                        if (account == "blueprints")
                        env.POLICIES_IN_ACTION = '["unattached_volume", "ip_unattached", "zombie_snapshots", "unused_nat_gateway", "s3_inactive", "empty_roles", "zombie_cluster_resource"]'
                        env.account_name = "${account}"
                        env.ADMIN_MAIL_LIST = "${accounts_list[account]}"
                        sh 'python3 jenkins/tenant/aws/common/run_policies.py'
                                        }
                    }
                }
            }
        }
        stage('Finalize Cleanup') {
            steps {
                 sh '''if [[ "$(podman images -q ${QUAY_CLOUD_GOVERNANCE_REPOSITORY} 2> /dev/null)" != "" ]]; then podman rmi -f $(podman images -q ${QUAY_CLOUD_GOVERNANCE_REPOSITORY} 2> /dev/null); fi'''
                 deleteDir()
            }
        }
    }
    post {
        failure {
              script {
                msg = "Build error for ${env.JOB_NAME} ${env.BUILD_NUMBER} (${env.BUILD_URL})"
                emailext body: """\
            Jenkins job: ${env.BUILD_URL}\nSee the console output for more details:  ${env.BUILD_URL}consoleFull\n\n
            """,subject: msg, to: "${contact1}, ${contact2}, ${contact3}, ${contact4}"
            }
          }
    }
}
