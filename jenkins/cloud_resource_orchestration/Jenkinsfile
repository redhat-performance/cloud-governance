pipeline {
    agent {
        docker {
            label 'cloud-governance-worker'
            image 'quay.io/cloud-governance/centos-stream8-podman:latest'
            args  '-u root -v /etc/postfix/main.cf:/etc/postfix/main.cf --privileged'
        }
    }
    environment {
        QUAY_CLOUD_GOVERNANCE_REPOSITORY = credentials('QUAY_CLOUD_GOVERNANCE_REPOSITORY')
        AWS_ACCESS_KEY_ID_DELETE_PERF = credentials('cloud-governance-aws-access-key-id-delete-perf')
        AWS_SECRET_ACCESS_KEY_DELETE_PERF = credentials('cloud-governance-aws-secret-access-key-delete-perf')
        AWS_ACCESS_KEY_ID_DELETE_PSAP = credentials('cloud-governance-aws-access-key-id-delete-psap')
        AWS_SECRET_ACCESS_KEY_DELETE_PSAP = credentials('cloud-governance-aws-secret-access-key-delete-psap')
        AWS_ACCESS_KEY_ID_DELETE_PERF_SCALE = credentials('cloud-governance-aws-access-key-id-delete-perf-scale')
        AWS_SECRET_ACCESS_KEY_DELETE_PERF_SCALE = credentials('cloud-governance-aws-secret-access-key-delete-perf-scale')
        ES_HOST = credentials('cloud-governance-es-host')
        ES_PORT = credentials('cloud-governance-es-port')
        CLOUD_GOVERNANCE_SPECIAL_USER_MAILS = credentials('cloud-governance-special-user-mails')
        LDAP_HOST_NAME = credentials('cloud-governance-ldap-host-name')
        JIRA_URL = credentials('JIRA_URL')
        JIRA_USERNAME = credentials('JIRA_USERNAME')
        JIRA_TOKEN = credentials('JIRA_TOKEN')
        JIRA_QUEUE = credentials('JIRA_QUEUE')
        CLOUD_RESOURCE_ORCHESTRATION_INDEX = credentials('cloud-resource-orchestration-index')
        CRO_REPLACED_USERNAMES = credentials('cloud_governance_cro_replaces_usernames')
        CRO_PORTAL = credentials('cloud_governance_cro_portal')
        CRO_COST_OVER_USAGE = credentials('cloud_governance_cro_cost_over_usage')
        CRO_ES_INDEX = credentials('cloud_governance_cro_es_index')
        AWS_SECRET_ACCESS_KEY_ATHIRUMA_BOT = credentials('AWS_SECRET_ACCESS_KEY_ATHIRUMA_BOT')
        AWS_ACCESS_KEY_ID_ATHIRUMA_BOT = credentials('AWS_ACCESS_KEY_ID_ATHIRUMA_BOT')
        S3_RESULTS_PATH = credentials('S3_RESULTS_PATH')
        ATHENA_DATABASE_NAME = credentials('ATHENA_DATABASE_NAME')
        ATHENA_TABLE_NAME = credentials('ATHENA_TABLE_NAME')
        AZURE_CLIENT_SECRET = credentials('cloud-governance-azure-client-secret')
        AZURE_TENANT_ID = credentials('cloud-governance-azure-tenant-id')
        AZURE_ACCOUNT_ID = credentials('cloud-governance-azure-account-id')
        AZURE_CLIENT_ID = credentials('cloud-governance-azure-client-id')
        AZURE_SUBSCRIPTION_ID = credentials('cloud-governance-azure-subscription-id')
        contact1 = "ebattat@redhat.com"
        contact2 = "yinsong@redhat.com"
    }
    stages {
        stage('Checkout') { // Checkout (git clone ...) the projects repository
          steps {
            checkout scm
           }
        }
        stage('Initial Cleanup') {
            steps {
                 sh '''if [[ "$(podman images -q ${QUAY_CLOUD_GOVERNANCE_REPOSITORY} 2> /dev/null)" != "" ]]; then podman rmi -f $(podman images -q ${QUAY_CLOUD_GOVERNANCE_REPOSITORY} 2> /dev/null); fi'''
            }
        }
        stage('Run the CloudResourceOrchestration') {
            steps {
                sh 'python3 jenkins/cloud_resource_orchestration/run_cloud_resource_orchestration.py'
            }
        }
        stage('Finalize Cleanup') {
            steps {
                 sh '''if [[ "$(podman images -q ${QUAY_CLOUD_GOVERNANCE_REPOSITORY} 2> /dev/null)" != "" ]]; then podman rmi -f $(podman images -q ${QUAY_CLOUD_GOVERNANCE_REPOSITORY} 2> /dev/null); fi'''
                 deleteDir()
            }
        }
    }
    post {
       always {
           deleteDir()
       }
        failure {
              script {
                msg = "Build error for ${env.JOB_NAME} ${env.BUILD_NUMBER} (${env.BUILD_URL})"
                emailext body: """\
            Jenkins job: ${env.BUILD_URL}\nSee the console output for more details:  ${env.BUILD_URL}consoleFull\n\n
            """,
                subject: msg,
                to: "${contact1}, ${contact2}"
            }
        }
    }
}
