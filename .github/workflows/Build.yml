# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build

on:
  push:
    branches: [ main ]

jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.8', '3.9' ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f tests_requirements.txt ]; then pip install -r tests_requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Configure AWS credentials for pytest
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: 📃 Unittest and Integration tests with pytest
        env:
          BUCKET: ${{ secrets.BUCKET }}
          REGION: ${{ secrets.REGION }}
        run: |
          pytest --cov=cloud_governqance --cov-report=term-missing
          coverage run -m pytest
          coverage report -m
      - name: 🎥 Publish to coveralls.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pip install coveralls
          COVERALLS_REPO_TOKEN=${{ secrets.COVERALLS_REPO_TOKEN }} coveralls

  build:
    name: build
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: 🔨 Build and publish distribution 📦 to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
          python setup.py sdist bdist_wheel
          twine upload dist/*
          echo '⌛ Wait till package will be updated in PyPI'
          # Verfiy and wait till latest cloud-governance version will be updated in Pypi (timeout 900 seconds)
          timeout=900
          sleep_time=30
          expected_version=$(python3 setup.py --version)
          pip --no-cache-dir install cloud-governance --upgrade
          build=$(pip freeze | grep cloud-governance | sed 's/==/=/g')
          actual_version="$(cut -d'=' -f2 <<<"$build")"
          current_wait_time=0
          while [[ $current_wait_time < $timeout ]]; do
              if [[ "$expected_version" = "$actual_version" ]]; then
                echo 'cloud-governance version:' $expected_version 'was updated in Pypi'
                break;
              else
                # sleep for x seconds
                echo 'wait' "$((current_wait_time+sleep_time))" 'seconds'
                sleep $sleep_time
                current_wait_time="$((current_wait_time+sleep_time))"
                pip uninstall -y cloud-governance
                pip --no-cache-dir install cloud-governance --upgrade
                build=$(pip freeze | grep cloud-governance | sed 's/==/=/g')
                actual_version="$(cut -d'=' -f2 <<<"$build")"
                if (( $current_wait_time == $timeout )); then
                  echo "cloud-governance lastet version did not update in Pypi after 900 seconds - raise failure"
                  exit 1
                fi
              fi
          done
      - name: ⌛ Upload to 🐋 quay.io
        run: |
          version=$(python3 setup.py --version)
          sudo podman build --build-arg VERSION=$version --layers=false -t ${{ secrets.PACKAGE_NAME }}:v$version .
          sudo podman login quay.io -u ${{ secrets.QAUYIO_ROBOT_USER }} -p ${{ secrets.QAUYIO_ROBOT_TOKEN }}
          sudo podman push localhost/${{ secrets.PACKAGE_NAME }}:v$version quay.io/${{ secrets.QAUYIO_REPOSITORY }}/${{ secrets.PACKAGE_NAME }}:v$version
          sudo podman push localhost/${{ secrets.PACKAGE_NAME }}:v$version quay.io/${{ secrets.QAUYIO_REPOSITORY }}/${{ secrets.PACKAGE_NAME }}
          echo 'Wait 30 sec till image will be updated in quay.io'
          sleep 30

  bump_version:
    name: bump_version
    runs-on: ubuntu-latest
    needs: [ test, build ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: 🎁 Bump Version
        run: |
          version=$(python3 setup.py --version)
          git checkout main
          pip install bumpversion
          git config --global user.email ${{ secrets.EMAIL }}
          git config --global user.name  ${{ secrets.NAME }}
          git config pull.rebase false  # merge (the default strategy)
          bumpversion patch
          # GITHUB_REPOSITORY already taken => GIT_REPOSITORY
          git commit .bumpversion.cfg setup.py -m 'bump version to exist version v'$version
          git pull https://${{ secrets.GITHUB_TOKEN }}@${{ secrets.GIT_REPOSITORY}} main
          git push https://${{ secrets.GITHUB_TOKEN }}@${{ secrets.GIT_REPOSITORY}} main
          git push https://${{ secrets.GITHUB_TOKEN }}@${{ secrets.GIT_REPOSITORY}} --tag

  e2e:
    name: e2e
    needs: [test, build, bump_version]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: ['us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'eu-central-1', 'ap-south-1', 'eu-north-1', 'ap-northeast-1', 'ap-southeast-1', 'ap-southeast-2', 'eu-south-1', 'eu-west-3', 'sa-east-1']
        policy: ['ec2_idle', 'ec2_run', 'ebs_unattached',  'ebs_in_use']
        # we don't run zombie_cluster_resource due to long run
    steps:
      - uses: actions/checkout@v2
      - name: ✔️ E2E tests using latest quay.io
        run: |
          sudo podman run --rm --name cloud-governance -e policy=${{ matrix.policy }} -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION=${{ matrix.region }} -e dry_run=yes -e policy_output=${{ secrets.OUTPUT_BUCKET }}/test/${{ matrix.region }} -e log_level=INFO quay.io/ebattat/cloud-governance
          # gileaks policy
          # GITHUB_TOKEN already taken => GIT_TOKEN
          region='us-east-1'
          policy='gitleaks' 
          sudo podman run --rm --name cloud-governance -e policy=$policy -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION=$region -e git_access_token=${{ secrets.GIT_TOKEN }} -e git_repo=https://github.com/redhat-performance -e several_repos=yes -e policy_output=${{ secrets.OUTPUT_BUCKET }}/test/$region -e log_level=INFO quay.io/ebattat/cloud-governance
