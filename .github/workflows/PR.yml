# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: PR

on:
  pull_request_target:
    branches: [ main ]

jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.8', '3.9' ]
        # 3.10 - elasticsearch not support  https://stackoverflow.com/questions/69381312/in-vs-code-importerror-cannot-import-name-mapping-from-collections
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        # ldap requirements
        sudo apt-get install build-essential python3-dev libldap2-dev libsasl2-dev vim -y
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f tests_requirements.txt ]; then pip install -r tests_requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Configure AWS credentials for pytest
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.REGION }}
    - name: Install terraform and terragrunt
      run: |
        # Install Terrafrom
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get -y update && sudo apt-get install -y terraform
        pip3 install jinja2
        # install terragrunt
        wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.38.6/terragrunt_linux_amd64
        mv terragrunt_linux_amd64 terragrunt
        mv terragrunt /usr/local/bin/terragrunt
        chmod 775 /usr/local/bin/terragrunt
    - name: Create instance
      env:
        IMAGE_ID: ${{ secrets.IMAGE_ID }}
        INSTANCE_TYPE: ${{ secrets.INSTANCE_TYPE }}
        ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
        ROLE_NAME: ${{ secrets.ROLE_NAME }}
        REGION_NAME: ${{ secrets.TERRAFORM_REGION }}
        TAG_NAME: ${{ secrets.TAG_NAME }}
      run: |
        cd terraform/aws_instance
        # terrafrom apply
        terragrunt apply -auto-approve 1> /dev/null
        echo "INSTANCE_ID=$(terragrunt output -raw instance_id)" >> "$GITHUB_ENV"
    - name: ðŸ“ƒ Unittest and Integration tests with pytest
      env:
        BUCKET: ${{ secrets.BUCKET }}
        REGION: ${{ secrets.REGION }}
        INSTANCE_ID: ${{ env.INSTANCE_ID }}
      run: |
        python -m pytest
    - name: Destroy instance
      env:
        ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
        ROLE_NAME: ${{ secrets.ROLE_NAME }}
        REGION_NAME: ${{ secrets.TERRAFORM_REGION }}
      run: |    
        cd terraform/aws_instance
        # terraform destroy/
        terragrunt destroy -auto-approve 1> /dev/null

  e2e:
    name: e2e
    needs: [ test ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.8', '3.9' ]
        # 3.10 - elasticsearch not support  https://stackoverflow.com/questions/69381312/in-vs-code-importerror-cannot-import-name-mapping-from-collections
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          # ldap requirements
          sudo apt-get install build-essential python3-dev libldap2-dev libsasl2-dev vim -y
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f tests_requirements.txt ]; then pip install -r tests_requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Configure AWS credentials for pytest
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}
      - name: ðŸ“ƒ E2E test
        env:
          AWS_DEFAULT_REGION: ${{ secrets.REGION }}
          policy: ${{ secrets.POLICY }}
          policy_output: ${{ secrets.POLICY_OUTPUT }}
          RUNNER_PATH: ${{ secrets.RUNNER_PATH }}
        run: |
          PYTHONPATH=. python cloud_governance/main/main.py 1> /dev/null 2> $RUNNER_PATH/err.log
          if [ -s "$RUNNER_PATH/err.log" ]; then echo "Error E2E raised"; fi
